{"kind":"Notebook","sha256":"c108669810e263dc5a1dc9c29e4a182a24ae31118e8a56679042eaf3c7e46f37","slug":"gui","location":"/exercise3/gui.ipynb","dependencies":[],"frontmatter":{"title":"A Chatbot GUI","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Robert Haase","given":"Robert","family":"Haase"},"name":"Robert Haase","orcid":"0000-0001-5949-2327","github":"haesleinhuepf","id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Ronny Gey","given":"Ronny","family":"Gey"},"name":"Ronny Gey","orcid":"0000-0003-1028-1670","affiliations":["ufz"],"github":"geyslein","id":"contributors-myst-generated-uid-1"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/ScaDS/ai_training_ufz_2025","keywords":["AI","OER"],"copyright":"Copyright: Ronny Gey, UFZ Leipzig, Robert Haase, ScaDS.AI Leipzig, licensed <a href=\"https://creativecommons.org/licenses/by/4.0/\" target=\"_blank\">CC-BY 4.0</a> unless mentioned otherwise. Contributions and feedback are welcome.","affiliations":[{"id":"ufz","name":"Helmholtz Center for Environmental Research - UFZ","ror":"000h6jb29"}],"exports":[{"format":"ipynb","filename":"gui.ipynb","url":"/gui-53b2b9168ca6b9418b014005b40d27f3.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# This Jupyter notebook can be used to build a graphical user interface for a chatbot. \n# Just run this from the terminal:\n#\n# voila gui.ipynb","visibility":"show","key":"uecMKlMdJC"},{"type":"output","id":"wuq3y3zuQmdiFLwiOasxr","data":[],"visibility":"show","key":"Xd1CjOY6HS"}],"visibility":"show","key":"Hfg8dVbT6W"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"from llm_utilities import prompt_chatgpt, prompt_ollama, prompt_blablador, prompt_claude","key":"NElHvAKdPM"},{"type":"output","id":"CRmTi6tLR18boZLbNPkmw","data":[],"key":"RaZaEG1uMv"}],"key":"EtCE7KWbwH"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# decide which LLM to use here:\nprompt = prompt_chatgpt","visibility":"show","key":"L624SBK0w1"},{"type":"output","id":"JT6qPnTq0guO-9iaQkH3U","data":[],"visibility":"show","key":"BcapQndowF"}],"visibility":"show","key":"KDXD1jMs2N"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"chat_history = []\ndef prompt_with_memory(message:str):\n    \n    # convert message in the right format and store it in memory\n    question = {\"role\": \"user\", \"content\": message}\n    chat_history.append(question)\n    \n    # receive answer\n    response = prompt(chat_history)\n    \n    # convert answer in the right format and store it in memory\n    answer = {\"role\": \"assistant\", \"content\": message}\n    chat_history.append(answer)\n    \n    return response","visibility":"show","key":"spRt0iUYbl"},{"type":"output","id":"6Zk59V70s3CudkaGyokck","data":[],"visibility":"show","key":"jwc6wEREB3"}],"visibility":"show","key":"QaTt1Qumht"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Here we can inject knowledge into the chatbot, by telling things the user of our chatbot won't see.\n\n_ = prompt_with_memory(\"\"\"\nYou are an extremely talented Python programmer.\n\nYou use the word \"ehm\" at random places in sentences. Every second sentence contains \"ehm\" or \"ehhh\".\nYou are also rude and pedantic. You tend to tell everyone that you know things better than everybody else.\nKeep your answers 2-3 sentences short.\n\"\"\")","key":"v3Jhz5fppZ"},{"type":"output","id":"RYONNRJTAJflJHZ2J0yWE","data":[],"key":"wYJMQP8FO5"}],"key":"BsvH00HCFn"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"import ipywidgets as widgets\nfrom IPython.display import display\n\n# Create widgets\noutput_label = widgets.HTML(value=\"\")\ntext_input = widgets.Text(placeholder=\"Type something here...\")\nsubmit_button = widgets.Button(description=\"Submit\")\n\ndef on_submit(e):\n    question = text_input.value\n    if len(question) == 0:\n        return\n    text_input.value = \"\"\n\n    # submit prompt to LLM\n    answer = prompt_with_memory(question)\n\n    # Append question and answer to the existing HTML content\n    output_label.value += f\"\"\"\n    <div style='text-align:right; color: blue; font-size: 20px'>{question}</div>\n    <div style='text-align:left; color: darkgreen; font-size: 20px'>{answer}</div>\n    \"\"\"\n\n# Attach the event handler to the text field and the button\ntext_input.continuous_update = False\ntext_input.observe(on_submit)\nsubmit_button.on_click(on_submit)\n\n# Arrange the widgets for display\ndisplay(output_label, widgets.HBox([text_input, submit_button]))","visibility":"show","key":"htX9tOhv8K"},{"type":"output","id":"Vrpa-a8wrzOUgl8pu1Vxf","data":[],"visibility":"show","key":"X1aH9aeT5f"}],"visibility":"show","key":"GlfgOEY3RI"}],"key":"KhOJClkEo1"},"references":{"cite":{"order":[],"data":{}}}}